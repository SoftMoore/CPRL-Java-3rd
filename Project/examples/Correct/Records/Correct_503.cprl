type Point = record
  {
    x : Integer;
    y : Integer;
  };

const arraySize := 10;

type PointArray = array[arraySize] of Point;

proc writePoint(p : Point)
  {
    write "Point(", p.x, ", ", p.y, ")";
  }

// compare two points using lexicographic order
fun lessThan(p1 : Point, p2 : Point) : Boolean
  {
    return p1.x < p2.x or (p1.x = p2.x and p1.y < p2.y);
  }

// insertion sort
proc sort(var a : PointArray)
  {
    var i, j : Integer;
    var save : Point;

    i := 1;
    while i < arraySize loop
      {
        // insert a[i] into the sorted slice a[0]..a[i - 1]
        save := a[i];
        j := i - 1;

        while j >= 0 and lessThan(save, a[j]) loop
          {
            a[j + 1] := a[j];
            j := j - 1;
          }

        a[j + 1] := save;  // insert saved value at proper position
        i := i + 1;
     }
  }

proc writeArray(a : PointArray)
  {
    var i : Integer := 0;

    while i < arraySize loop
      {
        write("   ");
        writePoint(a[i]);
        writeln;
        i := i + 1;
      }
  }

proc main()
  {
    var i  : Integer;
    var pa : PointArray;

    // initialize array
    i := 0;
    while i < arraySize loop
      {
        pa[i].x := 2*i;
        pa[i].y := 5;
        i := i + 1;
      }

    pa[2].x := 99;
    pa[2].y := -99;
    pa[4].x := -6;
    pa[4].y := -8;
    pa[5].y := 0;
    pa[7].x := -1;
    pa[9].x := 0;
    pa[9].y := -3;

    writeln "initial array:";
    writeArray(pa);
    sort(pa);
    writeln "sorted array:";
    writeArray(pa);
  }
